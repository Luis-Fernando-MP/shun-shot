@use '@sass/config/vars' as *;
@use '@sass/config/typography' as *;
@use '@sass/utils/media' as m;
@use '@sass/utils/text' as t;
@use '@sass/utils/scrollbar' as *;
@use '@sass/utils/boxLoader' as loader;
@use '@sass/utils/defs' as d;
@use 'sass:map';

*,
::before,
::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  border: none;

  list-style: none;

  outline: none;

  &:focus {
    outline: none;
  }
}

html {
  font-size: $family-size;
}

@include m.mediumScreen {
  html {
    font-size: 12px;
  }
}

body {
  position: relative;

  overflow: hidden;

  width: 100dvw;
  height: 100dvh;
  min-height: 100dvh;
  max-height: 100vh;

  font-family: $font1;
  color: rgb($fn1);

  background-color: rgb($bg1);

  // Typography

  @each $tag, $props in $typography {
    #{$tag} {
      font-family: map.get($props, family);
      font-size: map.get($props, size);
      font-weight: map.get($props, weight);
      color: map.get($props, color);
    }
  }

  textarea,
  button,
  select {
    font-family: map.get(map.get($typography, 'a'), family);
    font-size: map.get(map.get($typography, 'a'), size);
    font-weight: map.get(map.get($typography, 'a'), weight);
    color: map.get(map.get($typography, 'a'), color);

    background: none;
  }

  small,
  label,
  span,
  input {
    font-family: map.get(map.get($typography, 'p'), family);
    font-size: map.get(map.get($typography, 'p'), size);
    font-weight: map.get(map.get($typography, 'p'), weight);
    color: map.get(map.get($typography, 'p'), color);
  }

  .icon,
  .lucide {
    display: block;
    width: $icon;
    height: $icon;
  }

  .lucide {
    stroke: rgb($fn1);
    stroke-width: 1.5;
  }

  ::selection {
    color: rgb($fn1);
    background-color: rgb($tn1);
  }

  .loading {
    @include loader.boxLoader;
  }

  input {
    width: min-content;

    &:focus {
      outline: none;
    }
  }

  input[type='number'] {
    appearance: textfield;

    &::-webkit-inner-spin-button,
    &::-webkit-outer-spin-button {
      margin: 0;
      appearance: none;
    }
  }

  a {
    text-decoration: none;
  }

  .border {
    border: 1px solid rgb($bg3);
  }

  button {
    cursor: pointer;
  }

  .separator {
    width: 1px;
    height: 25px;
    background-color: rgba($fn2, 0.7);
  }

  .active {
    color: rgb($fnA) !important;
    background-color: rgb($tn1) !important;

    svg {
      stroke: rgb($fnA) !important;
    }
  }
}

.toast {
  width: fit-content !important;
  height: fit-content !important;
  padding: 0 !important;
  border: 1px solid rgb($bg3, 0.5) !important;
  border-radius: $radius * 0.7 !important;

  line-height: normal !important;

  background-color: rgb($bg2, 0.7) !important;
  backdrop-filter: blur(20px) !important;
  box-shadow: none !important;

  > div {
    margin: 0 !important;
  }
}

.paragraph {
  &-normal,
  &-highlight,
  &-link,
  &-emphasis {
    display: inline;
    margin: 0;
    padding: 0;
  }

  &-emphasis {
    font-size: $fH5;
    font-weight: lighter;
    color: rgb($fn1) !important;
  }

  &-break {
    display: block;
    margin-top: $padding * 0.5;
  }

  &-normal {
    color: rgb($fn2);
  }

  &-highlight {
    color: rgb($fn1);
  }

  &-link {
    color: rgb($fn1);
    text-decoration: wavy underline rgb($tn1) 1.5px;
    text-underline-offset: 3px;
  }

  &-precaution {
    cursor: help;
    font-style: italic;
    text-decoration: dotted underline rgb($tn1) 3px;
    text-underline-offset: 5px;
  }
}
