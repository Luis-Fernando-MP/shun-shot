@use '@sass/config/vars' as *;
@use '@sass/config/typography' as *;
@use '@sass/utils/media' as m;
@use '@sass/utils/text' as t;
@use '@sass/utils/scrollbar' as *;
@use '@sass/utils/tooltip' as tol;
@use '@sass/utils/boxLoader' as loader;
@use 'sass:map';

*,
::before,
::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  border: none;

  list-style: none;

  outline: none;

  &:focus {
    outline: none;
  }
}

html {
  font-size: $family-size;
}

@include m.mediumScreen {
  html {
    font-size: 12px;
  }
}

body {
  @include scroll-hidden;

  user-select: none;

  position: relative;

  overflow-x: hidden;
  overflow-y: auto;

  width: 100dvw;
  height: 100dvh;
  min-height: 100dvh;

  font-family: $font1;
  color: rgb($fn1);

  background-color: rgb($bg1);

  canvas {
    image-rendering: -webkit-crisp-edges;
    image-rendering: pixelated;
    image-rendering: crisp-edges;
  }

  .icon,
  .lucide {
    display: block;
    width: $icon;
    height: $icon;
    stroke: rgb($fn2);
  }

  ::selection {
    color: rgb($fn1);
    background-color: rgb($tn1);
  }

  .loading {
    pointer-events: none;

    @include loader.boxLoader;
  }

  .error {
    pointer-events: none;
    position: relative;
    outline: 2px solid $error;

    &::after {
      content: '';

      position: absolute;
      z-index: 1;
      top: 0;
      left: 0;

      width: 100%;
      height: 100%;

      background-color: rgb($error, 0.2);

      animation: flicker 1s infinite alternate;
    }
  }

  input {
    width: min-content;
  }

  input[type='number'] {
    appearance: textfield;

    &::-webkit-inner-spin-button,
    &::-webkit-outer-spin-button {
      margin: 0;
      appearance: none;
    }
  }

  small,
  span,
  input {
    font-family: map.get(map.get($typography, 'p'), family);
    font-size: map.get(map.get($typography, 'p'), size);
    font-weight: map.get(map.get($typography, 'p'), weight);
    color: map.get(map.get($typography, 'p'), color);
  }

  textarea,
  button,
  select {
    font-family: map.get(map.get($typography, 'a'), family);
    font-size: map.get(map.get($typography, 'a'), size);
    font-weight: map.get(map.get($typography, 'a'), weight);
    color: map.get(map.get($typography, 'a'), color);

    background: none;
  }

  button {
    cursor: pointer;
  }

  .active {
    color: rgb($fnA);
    background-color: rgb($tn1);

    svg {
      stroke: rgb($fnA);
    }
  }

  @each $tag, $props in $typography {
    #{$tag} {
      font-family: map.get($props, family);
      font-size: map.get($props, size);
      font-weight: map.get($props, weight);
      color: map.get($props, color);
    }
  }
}
